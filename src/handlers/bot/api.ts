import { TOrder } from '@/helpers/types'
import axios from 'axios'
import env from '@/helpers/env'
import fs from 'fs'
import path from 'path'
// Add 'http://' to the URL
const BASE_URL_SEND_MESSAGE = `https://7103.api.greenapi.com/waInstance${env.INSTANCE_ID}/sendMessage/${env.TOKEN}`
const BASE_URL_SEND_FILE = `https://7103.api.greenapi.com/waInstance${env.INSTANCE_ID}/sendFileByUrl/${env.TOKEN}`
const BASE_URL_LAST_INCOMING_MESSAGES = `https://7103.api.greenapi.com/waInstance${env.INSTANCE_ID}/lastIncomingMessages/${env.TOKEN}`
const GET_MESSAGE_BY_ID = `https://7103.api.greenapi.com/waInstance${env.INSTANCE_ID}/getMessage/${env.TOKEN}`

export const fetchLastIncomingMessages = async (minutes = 5) => {
  try {
    const response = await axios.get(BASE_URL_LAST_INCOMING_MESSAGES, {
      params: { minutes },
    })
    return response.data
  } catch (error) {
    console.error('Error fetching last incoming messages:')
  }
}

export const sendMessageToSpecialists = async (orderDetails: TOrder) => {
  try {
    const payload = {
      chatId: env.CHAT_ID_TEST,
      message: formatOrderMessage(orderDetails),
    }

    // Check if photoURL exists in orderDetails
    if (orderDetails.options.photoURL) {
      const filePayload = {
        chatId: env.CHAT_ID_TEST,
        urlFile: orderDetails.options.photoURL,
        fileName: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ', // You can customize this as needed
        caption: formatOrderMessage(orderDetails), // You can customize this as needed
      }
      const response = await axios.post(BASE_URL_SEND_FILE, filePayload, {
        headers: {
          'Content-Type': 'application/json',
        },
      })
      return response.data
    }

    const response = await axios.post(BASE_URL_SEND_MESSAGE, payload)
    return response.data
  } catch (error) {
    console.error('Error creating order:', error)
    throw error
  }
}

export const sendOrderTakenToGroup = async (order: any) => {
  try {
    const payload = {
      chatId: env.CHAT_ID_TEST,
      message: `‚ùóÔ∏è–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤—ã–±—Ä–∞–Ω. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è‚ùóÔ∏è`,
      quotedMessageId: order.idMessageWA,
    }

    const response = await axios.post(BASE_URL_SEND_MESSAGE, payload)

    return response.data
  } catch (error) {
    console.error('Error creating order:', error)
    throw error
  }
}

export const sendSpecialistAlredyFindedMessageToUser = async (
  order: any,
  number: string
) => {
  try {
    if (order.arrivalTime.isNearestHour) {
      const userChatID = number + '@c.us'
      const arrivalTime = order.bestBit + 10
      const payload = {
        chatId: userChatID,
        message: `üöë –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –∑–∞–∫–∞–∑ –∏ —É–∂–µ –≤—ã–µ—Ö–∞–ª! –û–∂–∏–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ ${arrivalTime} –º–∏–Ω—É—Ç`,
      }

      const response = await axios.post(BASE_URL_SEND_MESSAGE, payload)

      return response.data
    }
  } catch (error) {
    console.error('Error creating order:', error)
    throw error
  }
}

export const sendUserDataToSpecialist = async (
  IdMessageOrder: string,
  numberSpecialist: string,
  numberUser: string
) => {
  try {
    const payloadForGetMessageOrder = {
      chatId: env.CHAT_ID_TEST,
      idMessage: IdMessageOrder,
    }
    const messageOrder: any = await axios.post(
      GET_MESSAGE_BY_ID,
      payloadForGetMessageOrder
    )

    let message
    if (messageOrder.data.typeMessage == 'extendedTextMessage') {
      message = messageOrder.data.textMessage
    } else {
      message = messageOrder.data.caption
    }

    const payload = {
      chatId: numberSpecialist + '@c.us',
      message:
        `–í—ã –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–∫–∞–∑–∞ \n\n` +
        `–ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º: +${numberUser}\n` +
        `‚ùï–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥ –≤—ã–µ–∑–¥–æ–º –∏ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã —É–∂–µ –≤—ã–µ—Ö–∞–ª–∏‚ùï\n\n` +
        `–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç —Å–ª–æ–≤–æ ¬´–≥–æ—Ç–æ–≤–æ¬ª, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ –º–∏–Ω—É—Ç—ã –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω \n\n` +
        `${message}  \n\n`,
    }

    const response = await axios.post(BASE_URL_SEND_MESSAGE, payload)

    return response.data
  } catch (error) {
    console.error('Error creating order:', error)
    throw error
  }
}

export const sendUserDataToAdmin = async (
  IdMessageOrder: string,
  adminNumber: string,
  numberSpecialist: string,
  numberUser: string
) => {
  try {
    const payloadForGetMessageOrder = {
      chatId: env.CHAT_ID_TEST,
      idMessage: IdMessageOrder,
    }
    const messageOrder: any = await axios.post(
      GET_MESSAGE_BY_ID,
      payloadForGetMessageOrder
    )

    let message
    if (messageOrder.data.typeMessage == 'extendedTextMessage') {
      message = messageOrder.data.textMessage
    } else {
      message = messageOrder.data.caption
    }

    const payload = {
      chatId: adminNumber + '@c.us',
      message:
        `–ù–∞ –∑–∞–∫–∞–∑: \n\n` +
        `${message}  \n\n` +
        `–ë—ã–ª –≤—ã–±—Ä–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º: +${numberSpecialist} \n` +
        `–ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–≤—è–∑–∏ : +${numberUser}`,
    }

    const response = await axios.post(BASE_URL_SEND_MESSAGE, payload)

    return response.data
  } catch (error) {
    console.error('Error creating order:', error)
    throw error
  }
}

// export const notifyAboutCansel = async (order: any) => {
//   try {
//     const payload = {
//       chatId: env.CHAT_ID_TEST,
//       message: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
//       quotedMessageId: order.idMessageWA,
//     }
//     const response = await axios.post(BASE_URL_SEND_MESSAGE, payload)
//     return response.data
//   } catch (error) {
//     console.error('Error fetching last incoming messages:', error)
//     throw error
//   }
// }

export const notifyAboutCansel = async (order: any) => {
  try {
    if (order.ownerBestBit) {
      const payloadAdmin = {
        chatId: env.ADMIN_NUMBER + '@c.us',
        message: `–ó–∞–∫–∞–∑ –¥–ª—è ${order.ownerBestBit} –æ—Ç–º–µ–Ω–µ–Ω`,
      }

      await axios.post(BASE_URL_SEND_MESSAGE, payloadAdmin)

      const payload = {
        chatId: order.ownerBestBit + '@c.us',
        message: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
      }

      const response = await axios.post(BASE_URL_SEND_MESSAGE, payload)
      return response.data
    } else {
      const payload = {
        chatId: env.CHAT_ID_TEST,
        message: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
        quotedMessageId: order.idMessageWA,
      }
      const response = await axios.post(BASE_URL_SEND_MESSAGE, payload)
      return response.data
    }
  } catch (error) {
    console.error('Error fetching last incoming messages:', error)
    throw error
  }
}

export const sendConfirmationMessageToUser = async (
  orderDetails: TOrder,
  number: string
) => {
  try {
    const userChatID = number + '@c.us'
    const payload = {
      chatId: userChatID,
      message: formatConfirmationMessage(orderDetails),
    }

    const response = await axios.post(BASE_URL_SEND_MESSAGE, payload)
    return response.data
  } catch (error) {
    console.error('Error creating order:', error)
    throw error
  }
}

export const sendVerificationCode = async (phoneNumber: string) => {
  try {
    const code = Math.floor(10000 + Math.random() * 90000).toString()
    const payload = {
      chatId: `${phoneNumber}@c.us`,
      message: `ukol.kz –∫–æ–¥: *${code}*`,
    }
    const response = await axios.post(BASE_URL_SEND_MESSAGE, payload)
    return {
      data: response.data,
      code: code,
    }
  } catch (error) {
    console.error('Error sending verifucation code:', error)
    throw error
  }
}

function formatOrderMessage(orderDetails: TOrder): string {
  // Extracting necessary fields
  const { title, address, amount, options, arrivalTime } = orderDetails

  // Prepare options list, filtering out falsy values and formatting the output
  const optionsList = Object.entries(options)
    .filter(([, value]) => value) // Keep only options with truthy values
    .map(([key]) => {
      // Replace keys with user-friendly strings
      switch (key) {
        case 'isNeedPharmacy':
          return '‚Ä¢ –ù—É–∂–Ω–æ –∑–∞–π—Ç–∏ –≤ –∞–ø—Ç–µ–∫—É'
        case 'isHaveDoctorsAppointment':
          return '‚Ä¢ –ï—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–∞—á–∞'
        case 'isWithDrugsCocktail':
          return '‚Ä¢ –ù—É–∂–Ω—ã –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –¥–ª—è –∫–æ–∫—Ç–µ–π–ª—è'
        case 'isPremiumIntoxication':
          return '‚Ä¢ –ü—Ä–µ–º–∏—É–º –∏–Ω—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è'
        case 'isWithDressingMaterial':
          return '‚Ä¢ –° –ø–µ—Ä–µ–≤—è–∑–æ—á–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º'
        case 'isWithMaterialsPoisoning':
          return '‚Ä¢ –° –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏'
        default:
          return ''
      }
    })
    .join('\n')

  // Determine arrival time message
  const arrivalTimeMessage =
    arrivalTime && arrivalTime.isNearestHour
      ? '*–ù–∞ –≤—Ä–µ–º—è:* –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
      : `*–ù–∞ –¥–∞—Ç—É :* ${arrivalTime?.date} \n` +
        `*–ù–∞ –≤—Ä–µ–º—è :* ${arrivalTime?.hours || 'N/A'} —á–∞—Å–æ–≤ ${
          arrivalTime?.minutes || 'N/A'
        } –º–∏–Ω—É—Ç—ã`

  // Construct the message
  const LINK_TO_YANDEX_MAP = `https://yandex.ru/maps/?ll=${orderDetails.lng},${orderDetails.lat}&z=18&l=map&pt=${orderDetails.lng},${orderDetails.lat}`
  return (
    `üì¢ *–ó–∞–∫–∞–∑*\n\n` +
    `*–£—Å–ª—É–≥–∞:* ${title || 'N/A'}\n` +
    `*–ê–¥—Ä–µ—Å:* ${address || 'N/A'}\n` +
    `*–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã:* ${LINK_TO_YANDEX_MAP}\n` +
    `*–ò—Ç–æ–≥ –∫ –æ–ø–ª–∞—Ç–µ:* ${amount || 0}‚Ç∏\n` +
    `*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:*\n${optionsList || '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}\n` +
    (options.daysForNurse !== 0
      ? `*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω –¥–ª—è –º–µ–¥—Å–µ—Å—Ç—Ä—ã:* ${options.daysForNurse}\n`
      : '') +
    `*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:*\n ${options.message || '–ù–µ—Ç—É'}\n` +
    `${arrivalTimeMessage}`
  )
}

const BASE_URL_UPLOAD = `https://7103.api.greenapi.com/waInstance${env.INSTANCE_ID}/uploadFile/${env.TOKEN}`

export const uploadeAppointmentPhoto = async (file: any) => {
  const filePath = path.join(__dirname, './../../../uploads', file.originalname) // Adjust the path as necessary
  const fileBuffer = fs.readFileSync(filePath) // Read the file into a buffer

  try {
    const response = await axios.post(BASE_URL_UPLOAD, fileBuffer, {
      headers: {
        'Content-Type': file.mimetype, // Set the correct content type
      },
    })
    return response.data
  } catch (error) {
    console.error('Error uploading file:', error)
    throw error
  }
}

function formatConfirmationMessage(orderDetails: TOrder): string {
  // Extracting necessary fields
  const { title, address, amount, options, arrivalTime } = orderDetails

  // Prepare options list, filtering out falsy values and formatting the output
  const optionsList = Object.entries(options)
    .filter(([, value]) => value) // Keep only options with truthy values
    .map(([key]) => {
      // Replace keys with user-friendly strings
      switch (key) {
        case 'isNeedPharmacy':
          return '‚Ä¢ –ù—É–∂–Ω–æ –∑–∞–π—Ç–∏ –≤ –∞–ø—Ç–µ–∫—É'
        case 'isHaveDoctorsAppointment':
          return '‚Ä¢ –ï—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–∞—á–∞'
        case 'isWithDrugsCocktail':
          return '‚Ä¢ –ù—É–∂–Ω—ã –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –¥–ª—è –∫–æ–∫—Ç–µ–π–ª—è'
        case 'isPremiumIntoxication':
          return '‚Ä¢ –ü—Ä–µ–º–∏—É–º –∏–Ω—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è'
        case 'isWithDressingMaterial':
          return '‚Ä¢ –° –ø–µ—Ä–µ–≤—è–∑–æ—á–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º'
        case 'isWithMaterialsPoisoning':
          return '‚Ä¢ –° –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏'
        default:
          return ''
      }
    })
    .join('\n')

  // Determine arrival time message
  const arrivalTimeMessage =
    arrivalTime && arrivalTime.isNearestHour
      ? '*–ù–∞ –≤—Ä–µ–º—è:* –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
      : `*–ù–∞ –¥–∞—Ç—É :* ${arrivalTime?.date} \n` +
        `*–ù–∞ –≤—Ä–µ–º—è :* ${arrivalTime?.hours || 'N/A'} —á–∞—Å–æ–≤ ${
          arrivalTime?.minutes || 'N/A'
        } –º–∏–Ω—É—Ç—ã`

  // Construct the message
  return (
    `‚úÖ*–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω*‚úÖ\n\n` +
    (arrivalTime.isNearestHour
      ? `–ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å –æ —Ç–æ–º –∫–æ–≥–¥–∞ –ø–æ–¥–±–µ—Ä–µ–º –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n\n`
      : `–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –±—É–¥–µ—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏, –æ–∂–∏–¥–∞–π—Ç–µ\n\n`) +
    `*–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n` +
    `*–£—Å–ª—É–≥–∞:* ${title || 'N/A'}\n` +
    `*–ê–¥—Ä–µ—Å:* ${address || 'N/A'}\n` +
    `*–ò—Ç–æ–≥ –∫ –æ–ø–ª–∞—Ç–µ:* ${amount || 0}‚Ç∏\n` +
    `*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:*\n${optionsList || '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}\n` +
    `*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:*\n ${options.message || '–ù–µ—Ç—É'}\n` +
    `${arrivalTimeMessage}\n`
  )
}

export const sendMessage = async (to: string, message: string) => {
  try {
    const payload = {
      chatId: `${to}@c.us`,
      message: message,
    }
    const response = await axios.post(BASE_URL_SEND_MESSAGE, payload)
    return response.data
  } catch (error) {
    console.error('Error creating order:', error)
    throw error
  }
}

// export const sendHowToTakeOrderMessage = async (quotedMessage: any) => {
//   try {

//     const message =
//       `*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –≤–∑—è—Ç—å –∑–∞–∫–∞–∑:* \n\n` +
//       `*–ß—Ç–æ –±—ã –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ —Å–º–∞—Ö–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∏–Ω—É—Ç –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è —á—Ç–æ –±—ã –≤–∑—è—Ç—å –∑–∞–∫–∞–∑* \n\n` +
//       `–∏–ª–∏ \n\n` +
//       `*–ó–∞–∂–º–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚Ü∞ –æ—Ç–≤–µ—Ç–∏—Ç—å¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∏–Ω—É—Ç –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è —á—Ç–æ –±—ã –≤–∑—è—Ç—å –∑–∞–∫–∞–∑*`
//     const payload = {
//       chatId: env.CHAT_ID_TEST,
//       quotedMessageId: quotedMessage.idMessage,
//       message: message,
//     }
//     const response = await axios.post(BASE_URL_SEND_MESSAGE, payload)
//     return response.data
//   } catch (error) {
//     console.error('Error creating order:', error)
//     throw error
//   }
// }
